exec('''
try:
    type(here)
except NameError:
    exit()
''')
tU=True
uY=input
ut=print
ux=str
uQ=getattr
ul=isinstance
uV=round
ub=False
up=None
ui=int
ue=ValueError
uk=range
uW=enumerate
uy=len
uK=Exception
uf=float
ur=KeyError
uj=id
Y(autoreset=tU)
def YX(pre):
 global u
 u=pre
def Yo(m):
 global ON
 return ON
x=uY('> Token:\n')
u=uY('> Prefix:\n')
os.system('cls')
u='.'
def YO(x,y):
 global u
 return u
Q='https://www.youtube.com/watch?v=1IGS0-QF86U'
l=Yi.Bot(command_prefix=YO,case_insensitive=tU,self_bot=tU)
l.remove_command('help')
V=datetime.now()
ON=tU
b=discord.Colour(0x2ecc71)
@l.event
async def YG():
 ut(f'''
{Fore.RED}
 ██ ▄█▀ █    ██  ██▀███   ▒█████
 ██▄█▒  ██  ▓██▒▓██ ▒ ██▒▒██▒  ██▒
▓███▄░ ▓██  ▒██░▓██ ░▄█ ▒▒██░  ██▒
▓██ █▄ ▓▓█  ░██░▒██▀▀█▄  ▒██   ██░
▒██▒ █▄▒▒█████▓ ░██▓ ▒██▒░ ████▓▒░
▒ ▒▒ ▓▒░▒▓▒ ▒ ▒ ░ ▒▓ ░▒▓░░ ▒░▒░▒░
░ ░▒ ▒░░░▒░ ░ ░   ░▒ ░ ▒░  ░ ▒ ▒░
░ ░░ ░  ░░░ ░ ░   ░░   ░ ░ ░ ░ ▒
░  ░      ░        ░         ░ ░
───────────────────────────────────────────────
{Fore.CYAN}Documentation: google.come
{Fore.GREEN}Version: 0.0.1
''' )
@l.event
async def YP(m,i):
 p=ux(i)
 i=uQ(i,'original',i)
 if ul(i,Yi.CommandNotFound):
  return
 elif ul(i,Yi.CheckFailure):
  ut(f"{Fore.BLUE}You're missing permission to execute this command")
 elif ul(i,Yi.MissingRequiredArgument):
  ut(f"{Fore.YELLOW}Missing argument: {error}")
 elif "Cannot send an empty message" in p:
  ut(f"{Fore.YELLOW}You cannot send a empty message")
 else:
  ut(f"{Fore.RED}{error_str}")
@l.event
async def Ym(m):
 await asyncio.sleep(30)
 try:
  await m.message.delete()
 except:
  pass
@l.command(description='misc')
@Yi.tF(Yo)
async def YA(m,pre:ux):
 YX(pre)
 await m.message.add_reaction('\u2705')
 await asyncio.sleep(10)
 await m.message.delete()
@l.command(description='test')
@Yi.tF(Yo)
async def Yh(m):
 await m.message.delete()
 m=await m.channel.send(Q)
 await asyncio.sleep(10)
 await m.YN()
@l.command(description='misc')
@Yi.tF(Yo)
async def YR(m):
 await m.message.delete()
 k=discord.Embed(title="Commands",description=f'[Help]({documentation_url})\n**Prefix:** {get_prefix(None, None)}',YB=b)
 W=''
 y=''
 K=''
 for f in l.commands:
  if f.description=='misc':
   y+=f'{command.name}\n'
  if f.description=='chaos':
   K+=f'{command.name}\n'
  if f.description=='general':
   W+=f'{command.name}\n'
 k.add_field(name="General",value=W)
 k.add_field(name="Misc",value=y)
 k.add_field(name="Chaos",value=K)
 m=await m.channel.send(embed=k)
 await asyncio.sleep(30)
 await m.YN()
@l.command(description='general')
@Yi.tF(Yo)
async def YS(m):
 j=datetime.now()
 C=j-V
 q=uV(C.total_seconds()/86400)
 v=uV(C.total_seconds()/3600)
 J=uV(C.total_seconds()/60)
 X=uV(C.total_seconds())
 if q>0:
  C=f'{days}d {hours}h {minutes}m {seconds}s'
 elif v>0:
  C=f'{hours}h {minutes}m {seconds}s'
 elif J>0:
  C=f'{minutes}m {seconds}s'
 else:
  C=f'{seconds}s'
 o=j.strftime('%B %d, %Y')
 O=j.strftime("%I:%M:%S %p")
 k=discord.Embed(YB=b)
 k.set_author(name=f'Time: {bdy} | {hms}\nRun time   |   {time_elapsed}')
 m=await m.channel.send(embed=k)
 await asyncio.sleep(30)
 await m.YN()
@l.command(description='general')
async def YL(m):
 global ON
 ON=ub
 await m.message.add_reaction('\u2705')
 await asyncio.sleep(10)
 await m.message.delete()
@l.command(description='general')
async def Yz(m):
 global ON
 ON=tU
 await m.message.add_reaction('\u2705')
 await asyncio.sleep(10)
 await m.message.delete()
@l.command(description='general',aliases=['s'])
@Yi.tF(Yo)
async def YI(m,*,g:ux):
 await l.change_presence(activity=discord.Streaming(name=g,url='https://www.twitch.tv/miakhalifa'))
 await m.message.add_reaction('\u2705')
 await asyncio.sleep(10)
 await m.message.delete()
@l.command(description='general')
@Yi.tF(Yo)
async def Yn(m):
 await l.change_presence(status=discord.Status.online)
 await m.message.add_reaction('\u2705')
 await asyncio.sleep(10)
 await m.message.delete()
@l.command(description='general',aliases=['l'])
@Yi.tF(Yo)
async def YF(m,*,g:ux):
 await l.change_presence(activity=discord.Activity(type=discord.ActivityType.listening,name=g))
 await m.message.add_reaction('\u2705')
 await asyncio.sleep(10)
 await m.message.delete()
@l.command(description='general',aliases=['w'])
@Yi.tF(Yo)
async def Yw(m,*,g:ux):
 await l.change_presence(activity=discord.Activity(type=discord.ActivityType.watching,name=g))
 await m.message.add_reaction('\u2705')
 await asyncio.sleep(10)
 await m.message.delete()
@l.command(description='general',aliases=['g'])
@Yi.tF(Yo)
async def YH(m,*,g:ux):
 await l.change_presence(activity=discord.Game(name=g))
 await m.message.add_reaction('\u2705')
 await asyncio.sleep(10)
 await m.message.delete()
@l.command(description='general',aliases=['p'])
@Yi.tF(Yo)
async def YT(m,*,g:ux):
 await l.change_presence(activity=discord.Game(name=g))
 await m.message.add_reaction('\u2705')
 await asyncio.sleep(10)
 await m.message.delete()
@l.command(description='general')
@Yi.tF(Yo)
async def Yd(m):
 k=discord.Embed()
 k.set_author(name=l.user.display_name,icon_url=l.user.avatar_url_as(format="png"))
 k.add_field(name="Response",value="Latency Test",inline=tU)
 k.add_field(name="Latency",value=f"{round(bot.latency * 1000)}ms")
 await m.channel.send(embed=k)
@l.command(description='general')
@Yi.tF(Yo)
async def YN(m,g:ux):
 await m.message.delete()
 if g.lower()=='all':
  async for A in m.channel.history(limit=up):
   try:
    await A.YN()
   except:
    pass
 try:
  async for A in m.channel.history(limit=ui(g)):
   try:
    await A.YN()
   except:
    pass
 except ue:
  pass
@l.command(description='general')
@Yi.tF(Yo)
async def Ys(m,*,g:ux):
 await m.message.add_reaction('\u2705')
 for R in m.guild.members:
  await asyncio.sleep(random.randint(30,120))
  await R.send(g)
@l.command(description='chaos')
@Yi.tF(Yo)
async def YE(m):
 await m.message.delete()
 for S in m.guild.members:
  await asyncio.sleep(.2)
  try:
   await m.guild.ban(S)
  except:
   try:
    await m.guild.kick(S)
   except:
    pass
 for L in m.guild.channels:
  await asyncio.sleep(.2)
  try:
   await L.YN()
  except:
   pass
 for z in m.guild.emojis:
  await asyncio.sleep(.2)
  try:
   await z.YN()
  except:
   pass
 for I in m.guild.roles:
  await asyncio.sleep(.2)
  try:
   await I.YN()
  except:
   pass
 for i in uk(50):
  await asyncio.sleep(.2)
  try:
   await m.guild.create_role(name="Server is ass lmao")
  except:
   pass
 for i in uk(50):
  await asyncio.sleep(.2)
  try:
   await m.guild.create_voice_channel(name='L')
  except:
   pass
 try:
  await m.guild.edit(name='L')
 except:
  pass
@l.command(description='general')
@Yi.tF(Yo)
async def Yc(m,R:discord.Member):
 k=discord.Embed(YB=b)
 k.set_image(url=R.avatar_url)
 m=await m.channel.send(embed=k)
 await asyncio.sleep(30)
 await m.YN()
@Yc.error
@Yi.tF(Yo)
async def Yg(m,i):
 if ul(i,Yi.MissingRequiredArgument):
  k=discord.Embed(YB=b)
  k.set_image(url=l.user.avatar_url)
  m=await m.channel.send(embed=k)
  await asyncio.sleep(30)
  await m.YN()
 else:
  pass
@l.command(description='general')
@Yi.tF(Yo)
async def YB(m,g:ux):
 global b
 if g=='teal':
  b=discord.Colour.teal()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='dark_teal':
  b=discord.Colour.dark_teal()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='green':
  b=discord.Colour.green()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='dark_green':
  b=discord.Colour.dark_green()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='blue':
  b=discord.Colour.blue()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='dark_blue':
  b=discord.Colour.dark_blue()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='purple':
  b=discord.Colour.purple()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='dark_purple':
  b=discord.Colour.dark_purple()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='magenta':
  b=discord.Colour.magenta()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='dark_magenta':
  b=discord.Colour.dark_magenta()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='gold':
  b=discord.Colour.gold()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g==' dark_gold':
  b=discord.Colour.dark_gold()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='orange':
  b=discord.Colour.orange()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='dark_orange':
  b=discord.Colour.dark_orange()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='red':
  b=discord.Colour.red()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='dark_red':
  b=discord.Colour.dark_red()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='lighter_grey':
  b=discord.Colour.lighter_grey()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='dark_grey':
  b=discord.Colour.dark_grey()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='light_grey':
  b=discord.Colour.light_grey()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='darker_grey':
  b=discord.Colour.darker_grey()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='blurple':
  b=discord.Colour.blurple()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 elif g=='greyple':
  b=discord.Colour.greyple()
  await m.message.add_reaction('\u2705')
  await asyncio.sleep(5)
 else:
  k=discord.Embed(title="Color not found and or supported",YB=b)
  k.set_footer('.colors for help')
  m=await m.channel.send(embed=k)
  await asyncio.sleep(20)
  await m.YN()
@l.command(description='misc')
@Yi.tF(Yo)
async def Ya(m,R:discord.Member):
 Ya=random.randint(1,300)
 k=discord.Embed(YB=b)
 k.add_field(name=f"{member.display_name}'s iq is",value=Ya)
 m=await m.channel.send(embed=k)
 await asyncio.sleep(30)
 await m.YN()
@Ya.error
@Yi.tF(Yo)
async def YM(m,i):
 if ul(i,Yi.MissingRequiredArgument):
  Ya=random.randint(1,300)
  k=discord.Embed(YB=b)
  k.add_field(name="Your iq is",value=Ya)
  m=await m.channel.send(embed=k)
  await asyncio.sleep(30)
  await m.YN()
@l.command(description='misc')
@Yi.tF(Yo)
async def YD(m,g:ux):
 op=['It is certain.','It is decidedly so.','Without a doubt.','Yes, definitely.','You may rely on it.','As I see it, yes.','Most likely.','Outlook good.','Yes.','Signs point to yes.','Reply hazy, try again.','Ask again later.''Better not tell you now.','Cannot predict now.','Concentrate and ask again.','Don\'t count on it.','My reply is no.','My sources say no','Outlook not so good','Very doubtful.']
 k=discord.Embed(title=random.choice(op),YB=b)
 m=await m.channel.send(embed=k)
 await asyncio.sleep(30)
 await m.YN()
@l.command(description='general')
@Yi.tF(Yo)
async def YU(m,R:discord.Member):
 F=[]
 w=datetime.now()
 if R.guild_permissions.kick_members:
  F.append("Kick")
 if R.guild_permissions.ban_members:
  F.append("Ban")
 if R.guild_permissions.manage_channels:
  F.append("Manage Channels")
 if R.guild_permissions.manage_guild:
  F.append("Manage server")
 if R.guild_permissions.manage_messages:
  F.append("Manage message")
 if R.guild_permissions.mention_everyone:
  F.append("Mention Everyone")
 if R.guild_permissions.mute_members:
  F.append("Mute members")
 if R.guild_permissions.deafen_members:
  F.append("Deafen Members")
 if R.guild_permissions.administrator:
  F.append("Administrator")
 if R.guild_permissions.move_members:
  F.append("Move members")
 if R.guild_permissions.manage_emojis:
  F.append("Manage emojis")
 if R.guild_permissions.manage_nicknames:
  F.append("Change nicknames")
 H=', '.join(F)
 T=''.join([I.mention for x,I in uW(R.roles)if x!=0])
 k=discord.Embed(title="Info",YB=b)
 k.set_author(name=R.display_name,url=R.avatar_url,icon_url=R.avatar_url)
 if T:
  k.add_field(name=f"Roles [{len(member.roles)-1}]",value=T,inline=ub)
 if H:
  k.add_field(name="Perms",value=H)
 k.add_field(name="Creation Date",value=R.created_at.strftime("%A, %d %B %Y at %I:%M %p"))
 if R.joined_at:
  k.add_field(name="Joined at",value=R.joined_at.strftime("%A, %d %B %Y at %I:%M %p"))
 k.set_thumbnail(url=R.avatar_url)
 k.set_footer(text=f'{time.strftime("%A, %d %B at %I:%M %p")} | ID: {member.id}')
 if R.activity:
  if uy(ux(R.activity))>300:
   k.add_field(name="Status",value=ux(R.activity)[:300]+'...')
  else:
   k.add_field(name="Status",value=ux(R.activity))
 if R.is_on_mobile():
  k.add_field(name="Device:",value='Mobile')
 else:
  k.add_field(name="Device:",value='PC')
 await m.channel.send(embed=k)
@l.command(description='general')
@Yi.tF(Yo)
async def tY(m,timer:ui,msg1:ux,msg2:ux):
 await m.channel.purge(limit=1)
 k=discord.Embed(title='POLL',description=f'{msg1} or {msg2}',YB=b)
 k.set_footer(text=f"Locking in {timer} seconds")
 e=await m.channel.send(embed=k)
 x=await e.add_reaction('\U0001F1E6')
 y=await e.add_reaction('\U0001F1E7')
 await asyncio.sleep(timer)
 k=discord.Embed(title='POLL ENDED',description=f'{msg1} or {msg2}',YB=b)
 z=await e.channel.fetch_message(e.uj)
 if z.reactions[0].count>z.reactions[1].count:
  k.set_footer(text=f'{msg1} wins the poll with {z.reactions[0].count}')
 elif z.reactions[0].count<z.reactions[1].count:
  k.set_footer(text=f'{msg2} wins the poll with {z.reactions[1].count}')
 else:
  k.set_footer(text=f'{msg1} vs {msg2} ended in a tie!')
 await e.clear_reactions()
 await e.edit(embed=k)
@l.command(description='general')
@Yi.tF(Yo)
async def tu(m,*,word:ux):
 try:
  async with aiohttp.ClientSession()as N:
   async with N.get(f'https://www.urbandictionary.com/define.php?term={word}')as r:
    if r:
     s=await r.text()
     E=BeautifulSoup(s,'html.parser')
     y=E.find("div",attrs={"class":"meaning"})
     c=y.text
     if uy(c)>2000:
      k=discord.Embed(title='Definition',description=c[:2000]+'...',YB=b)
     else:
      k=discord.Embed(title='Definition',description=c,YB=b)
     m=await m.channel.send(embed=k)
    else:
     k=discord.Embed(YB=b)
     k.set_author(name='Word doesn\'t exist in the urban ictionary',icon_url='https://img.icons8.com/cotton/64/000000/database-error.png',url=f'https://www.urbandictionary.com/define.php?term={word}')
     await m.channel.send(embed=k)
     return
 except uK as e:
  ut(e)
  k=discord.Embed(title='Something went wrong',description='Either the word doesnt exist on urban dictionary or the servers are down',YB=b)
  await m.channel.send(embed=k)
@tu.error
async def tx(m,i):
 if ul(i,Yi.MissingRequiredArgument):
  k=discord.Embed(title="urban",description=f"{get_prefix(None, None)}urban [word]\nShow urban dictionary defintion for a word",YB=b)
  await m.channel.send(embed=k)
@l.command(description='general')
@Yi.tF(Yo)
async def tQ(m):
 k=discord.Embed(YB=b)
 k.set_author(name="Server Info",icon_url='https://img.icons8.com/color/24/000000/info--v1.png')
 k.add_field(name="Name",value=m.guild.name,inline=tU)
 k.add_field(name="Roles",value=uy(m.guild.roles),inline=tU)
 k.add_field(name="Emojis",value=uy(m.guild.emojis),inline=tU)
 k.add_field(name="Region",value=m.guild.region,inline=tU)
 k.add_field(name="Members",value=uy(m.guild.members),inline=tU)
 k.add_field(name="Creation Date",value=m.guild.created_at.strftime("%A, %d %B %Y at %I:%M %p"),inline=tU)
 k.add_field(name="Text Channels",value=uy(m.guild.text_channels),inline=tU)
 k.add_field(name="Voice Channels",value=uy(m.guild.voice_channels),inline=tU)
 k.add_field(name="Filesize Limit",value='{:,.0f}'.format(m.guild.filesize_limit/uf(1<<20))+"MB",inline=tU)
 k.add_field(name="Verification level",value=ux(m.guild.verification_level),inline=tU)
 k.add_field(name="People Boosting",value=m.guild.verification_level,inline=tU)
 k.set_thumbnail(url=m.guild.icon_url)
 k.set_footer(text=f"ID: {ctx.guild.id}")
 await m.channel.send(embed=k)
@l.command(description='general')
@Yi.tF(Yo)
async def tl(m,amount:ui):
 await m.message.delete()
 g='''
    Vel quam elementum pulvinar etiam non. In nulla posuere sollicitudin aliquam ultrices sagittis orci a. Risus feugiat in ante metus dictum at tempor commodo ullamcorper. Et netus et malesuada fames. Ut eu sem integer vitae justo. A pellentesque sit amet porttitor eget dolor. Velit egestas dui id ornare arcu odio ut sem. Nullam eget felis eget nunc. Pellentesque habitant morbi tristique senectus et netus. Nisl nunc mi ipsum faucibus vitae aliquet nec ullamcorper sit. Ullamcorper velit sed ullamcorper morbi. Mauris rhoncus aenean vel elit. Non arcu risus quis varius. Mauris pharetra et ultrices neque ornare aenean euismod elementum nisi. Convallis convallis tellus id interdum velit laoreet.
    Sit amet porttitor eget dolor morbi non arcu risus quis. Dictum sit amet justo donec enim. Lorem mollis aliquam ut porttitor leo. Etiam tempor orci eu lobortis elementum nibh tellus. Ut etiam sit amet nisl purus in mollis. Suspendisse in est ante in. Libero enim sed faucibus turpis in eu mi. Turpis cursus in hac habitasse. Cras sed felis eget velit aliquet sagittis id consectetur. Ipsum suspendisse ultrices gravida dictum fusce. massa tincidunt dui ut ornare lectus. Ultrices neque ornare aenean euismod elementum nisi quis eleifend. Feugiat pretium nibh ipsum consequat nisl vel pretium lectus. Risus ultricies tristique nulla aliquet enim tortor at auctor urna. Consequat id porta nibh venenatis cras sed felis eget. Cursus euismod quis viverra nibh cras pulvinar. Cras semper auctor neque vitae tempus quam. Pellentesque eu tincidunt tortor aliquam nulla facilisi cras fermentum. Libero justo laoreet sit amet cursus sit. Gravida dictum fusce ut placerat orci. Augue neque gravida in fermentum et. Lectus proin nibh nisl condimentum id venenatis. Aliquet porttitor lacus luctus accumsan tortor posuere ac. Mi bibendum neque egestas congue quisque egestas diam. Commodo nulla facilisi nullam vehicula ipsum a. Laoreet suspendisse interdum consectetur libero id faucibus. Netus et malesuada fames ac. Est sit amet facilisis magna. Lobortis scelerisque fermentum dui faucibus in ornare quam.
    ''' 
 for i in uk(amount):
  await m.channel.send(g[:1999])
@YB.error
@Yi.tF(Yo)
async def tV(m,i):
 if ul(i,Yi.MissingRequiredArgument):
  k=discord.Embed(title=f"EX: {get_prefix(None, None)}color purple",YB=b)
  k.set_author(name='Colors\n\nteal\ndark_teal\ngreen\ndark_green\nblue\ndark_blue\npurple\ndark_purple\nmagenta\ndark_magenta\ngold\ndark_gold\norange\ndark_orange\nred\ndark_red\nlighter_grey\ndark_grey\nlight_grey\ndarker_grey\nblurple\ngreyple')
  m=await m.channel.send(embed=k)
  await asyncio.sleep(30)
  await m.YN()
@l.command(description='misc')
@Yi.tF(Yo)
async def tb(m):
 def tp(stringLength=6):
  B=string.ascii_letters+string.digits
  return ''.join(random.choice(B)for i in uk(stringLength))
 a=tp(16)
 await m.channel.send(f"https://discordapp.com/gifts/{code}")
@YU.error
async def ti(m,i):
 if ul(i,Yi.MissingRequiredArgument):
  F=[]
  w=datetime.now()
  if m.author.guild_permissions.kick_members:
   F.append("Kick")
  if m.author.guild_permissions.ban_members:
   F.append("Ban")
  if m.author.guild_permissions.manage_channels:
   F.append("Manage Channels")
  if m.author.guild_permissions.manage_guild:
   F.append("Manage server")
  if m.author.guild_permissions.manage_messages:
   F.append("Manage message")
  if m.author.guild_permissions.mention_everyone:
   F.append("Mention Everyone")
  if m.author.guild_permissions.mute_members:
   F.append("Mute members")
  if m.author.guild_permissions.deafen_members:
   F.append("Deafen members")
  if m.author.guild_permissions.administrator:
   F.append("Administrator")
  if m.author.guild_permissions.move_members:
   F.append("Move members")
  if m.author.guild_permissions.manage_emojis:
   F.append("Manage emojis")
  if m.author.guild_permissions.manage_nicknames:
   F.append("Change nicknames")
  H=', '.join(F)
  T=''.join([I.mention for x,I in uW(m.author.roles)if x!=0])
  k=discord.Embed(title="Info",YB=b)
  k.set_author(name=m.author.display_name,url=m.author.avatar_url,icon_url=m.author.avatar_url)
  if T:
   k.add_field(name=f"Roles [{len(ctx.author.roles)-1}]",value=T,inline=ub)
  if H:
   k.add_field(name="Perms",value=H)
  k.add_field(name="Creation Date",value=m.author.created_at.strftime("%A, %d %B %Y at %I:%M %p"))
  if m.author.joined_at:
   k.add_field(name="Joined at",value=m.author.joined_at.strftime("%A, %d %B %Y at %I:%M %p"))
  k.set_thumbnail(url=m.author.avatar_url)
  k.set_footer(text=f'{time.strftime("%A, %d %B at %I:%M %p")} | ID: {ctx.author.id}')
  if m.author.activity:
   if uy(ux(m.author.activity))>300:
    k.add_field(name="Status",value=ux(m.author.activity)[:300]+'...')
   else:
    k.add_field(name="Status",value=ux(m.author.activity))
  if m.author.is_on_mobile():
   k.add_field(name="Device:",value='Mobile')
  else:
   k.add_field(name="Device:",value='PC')
  await m.channel.send(embed=k)
 else:
  ut(i)
@l.command(description='general')
@Yi.tF(Yo)
async def te(m,_token):
 await m.message.delete()
 M={'Authorization':_token,'Content-Type':'application/json'}
 try:
  D=requests.get('https://canary.discordapp.com/api/v6/users/@me',headers=M)
  D=D.json()
  U=D['id']
  Yt=D['locale']
  Yu=D['avatar']
  Yx=languages.get(Yt)
  YQ=datetime.datetime.utcfromtimestamp(((ui(U)>>22)+1420070400000)/1000).strftime('%d-%m-%Y %H:%M:%S UTC')
 except ur:
  ut(f"{Fore.RED}Invalid token")
 em=discord.Embed(description=f"Name: `{res['username']}#{res['discriminator']}`\nID: `{res['id']}`\nEmail: `{res['email']}`\nCreation Date: `{creation_date}`\nProfile picture: [**Click here**](https://cdn.discordapp.com/avatars/{user_id}/{avatar_id})")
 Yl=[{'name':'Phone','value':D['phone']},{'name':'Flags','value':D['flags']},{'name':'Local language','value':D['locale']+f"{language}"},{'name':'MFA?','value':D['mfa_enabled']},{'name':'Verified?','value':D['verified']},]
 for YV in Yl:
  if YV['value']:
   em.add_field(name=YV['name'],value=YV['value'],inline=ub)
   em.set_thumbnail(url=f"https://cdn.discordapp.com/avatars/{user_id}/{avatar_id}")
 return await m.send(embed=em)
@l.command(description='general')
@Yi.tF(Yo)
async def tk(m):
 await m.message.delete()
 em=discord.Embed(title=m.guild.name)
 em.set_image(url=m.guild.icon_url)
 await m.send(embed=em)
@l.command(description='misc',aliases=['bitcoin'])
@Yi.tF(Yo)
async def tW(m):
 await m.message.delete()
 r=requests.get('https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD,EUR')
 r=r.json()
 Yb=r['USD']
 Yp=r['EUR']
 em=discord.Embed(description=f'USD: `{str(usd)}$`\nEUR: `{str(eur)}€`')
 em.set_author(name='Bitcoin',icon_url='https://cdn.pixabay.com/photo/2013/12/08/12/12/bitcoin-225079_960_720.png')
 await m.send(embed=em)
@l.command(description='misc',aliases=['ethereum'])
@Yi.tF(Yo)
async def ty(m):
 await m.message.delete()
 r=requests.get('https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD,EUR')
 r=r.json()
 Yb=r['USD']
 Yp=r['EUR']
 em=discord.Embed(description=f'USD: `{str(usd)}$`\nEUR: `{str(eur)}€`')
 em.set_author(name='Ethereum',icon_url='https://cdn.discordapp.com/attachments/271256875205525504/374282740218200064/2000px-Ethereum_logo.png')
 await m.send(embed=em)
@Yi.tF(Yo)
@l.command(description='misc')
async def tK(m):
 await m.message.delete()
 r=requests.get("https://nekos.life/api/v2/img/anal")
 D=r.json()
 em=discord.Embed()
 em.set_image(url=D['url'])
 await m.send(embed=em)
@Yi.tF(Yo)
@l.command(description='misc')
async def tf(m):
 await m.message.delete()
 r=requests.get("https://nekos.life/api/v2/img/erofeet")
 D=r.json()
 em=discord.Embed()
 em.set_image(url=D['url'])
 await m.send(embed=em)
@Yi.tF(Yo)
@l.command(description='misc')
async def tr(m):
 await m.message.delete()
 r=requests.get("https://nekos.life/api/v2/img/feetg")
 D=r.json()
 em=discord.Embed()
 em.set_image(url=D['url'])
 await m.send(embed=em)
@Yi.tF(Yo)
@l.command(description='misc')
async def tj(m):
 await m.message.delete()
 r=requests.get("https://nekos.life/api/v2/img/Random_hentai_gif")
 D=r.json()
 em=discord.Embed()
 em.set_image(url=D['url'])
 await m.send(embed=em)
@Yi.tF(Yo)
@l.command(description='misc')
async def tC(m):
 await m.message.delete()
 r=requests.get("https://nekos.life/api/v2/img/boobs")
 D=r.json()
 em=discord.Embed()
 em.set_image(url=D['url'])
 await m.send(embed=em)
@Yi.tF(Yo)
@l.command(description='misc')
async def tq(m):
 await m.message.delete()
 r=requests.get("https://nekos.life/api/v2/img/tits")
 D=r.json()
 em=discord.Embed()
 em.set_image(url=D['url'])
 await m.send(embed=em)
@Yi.tF(Yo)
@l.command(description='misc')
async def tv(m):
 await m.message.delete()
 r=requests.get("https://nekos.life/api/v2/img/blowjob")
 D=r.json()
 em=discord.Embed()
 em.set_image(url=D['url'])
 await m.send(embed=em)
@Yi.tF(Yo)
@l.command(description='misc')
async def tJ(m):
 await m.message.delete()
 r=requests.get("https://nekos.life/api/v2/img/les")
 D=r.json()
 em=discord.Embed()
 em.set_image(url=D['url'])
 await m.send(embed=em)
@Yi.tF(Yo)
@l.command(description='misc')
async def tX(m,S:discord.Member):
 await m.message.delete()
 r=requests.get("https://nekos.life/api/v2/img/feed")
 D=r.json()
 em=discord.Embed(description=S.mention)
 em.set_image(url=D['url'])
 await m.send(embed=em)
@Yi.tF(Yo)
@l.command(description='misc')
async def to(m,S:discord.Member):
 await m.message.delete()
 r=requests.get("https://nekos.life/api/v2/img/tickle")
 D=r.json()
 em=discord.Embed(description=S.mention)
 em.set_image(url=D['url'])
 await m.send(embed=em)
@Yi.tF(Yo)
@l.command(description='misc')
async def tO(m,S:discord.Member):
 await m.message.delete()
 r=requests.get("https://nekos.life/api/v2/img/slap")
 D=r.json()
 em=discord.Embed(description=S.mention)
 em.set_image(url=D['url'])
 await m.send(embed=em)
@Yi.tF(Yo)
@l.command(description='misc')
async def tG(m,S:discord.Member):
 await m.message.delete()
 r=requests.get("https://nekos.life/api/v2/img/hug")
 D=r.json()
 em=discord.Embed(description=S.mention)
 em.set_image(url=D['url'])
 await m.send(embed=em)
@Yi.tF(Yo)
@l.command(description='misc')
async def tP(m,S:discord.Member):
 await m.message.delete()
 r=requests.get("https://nekos.life/api/v2/img/smug")
 D=r.json()
 em=discord.Embed(description=S.mention)
 em.set_image(url=D['url'])
 await m.send(embed=em)
@Yi.tF(Yo)
@l.command(description='misc')
async def tm(m,S:discord.Member):
 await m.message.delete()
 r=requests.get("https://nekos.life/api/v2/img/pat")
 D=r.json()
 em=discord.Embed(description=S.mention)
 em.set_image(url=D['url'])
 await m.send(embed=em)
@Yi.tF(Yo)
@l.command(description='misc')
async def tA(m,S:discord.Member):
 await m.message.delete()
 r=requests.get("https://nekos.life/api/v2/img/kiss")
 D=r.json()
 em=discord.Embed(description=S.mention)
 em.set_image(url=D['url'])
 await m.send(embed=em)
def th(m):
 return m.author.guild_permissions.mute_members
@Yi.tF(Yo)
@l.command(description='general')
@Yi.has_permissions(ban_members=tU)
async def tR(m,R:discord.Member,*,reason=up):
 try:
  if R==m.message.author:
   await m.channel.send("Your can\'t ban yourself retard")
   return
  await R.tR(reason=reason)
  await m.channel.send("**Banned {}**".format(R.mention))
 except discord.Forbidden:
  await m.channel.send("You don\'t have permission to use this command")
@Yi.tF(Yo)
@l.command(description='general')
@Yi.has_permissions(kick_members=tU)
async def tS(m,R:discord.Member,*,reason=up):
 try:
  if R.guild_permissions.kick_members or R.guild_permissions.ban_members:
   await m.channel.send("You cant kick this person")
   return
  await R.tS(reason=reason)
  await m.channel.send("**Kicked {}**".format(R.mention))
 except discord.Forbidden:
  await m.channel.send("You don\'t have permission to use this command")
@Yi.tF(Yo)
@l.command(description='general')
@Yi.tF(th)
async def tL(m,R:discord.Member,*,reason=up):
 I=discord.utils.get(m.guild.roles,name="Muted")
 try:
  if I:
   if I not in R.roles:
    await m.channel.send(f"{member.display_name} is not muted")
    return
   I=discord.utils.get(m.guild.roles,name="Muted")
   await R.remove_roles(I,reason=reason)
   await m.channel.send("**Unmuted {}**".format(R.mention))
  else:
   await m.channel.send("Mute role is not created")
 except uK as e:
  ut(e)
@Yi.tF(Yo)
@l.command(description='general')
@Yi.has_permissions(ban_members=tU)
async def tz(m,uj:ui):
 try:
  S=await l.fetch_user(uj)
  await m.guild.unban(S)
  await m.channel.send("**Unbanned {}**".format(S.display_name))
 except discord.Forbidden:
  await m.channel.send("You don\'t have permission to use this command")
@Yi.tF(Yo)
@l.command(aliases=['mm'],description='general')
@Yi.has_permissions(manage_channels=tU)
async def tI(m,L:discord.VoiceChannel):
 if m.author.voice:
  if m.author in L.members:
   k=discord.Embed()
   k.set_author(name='Your already in this voice channel!',icon_url='https://img.icons8.com/fluent/48/000000/error.png')
   await m.channel.send(embed=k)
   return
  for x,R in uW(m.author.voice.channel.members):
   await R.move_to(L)
  await m.channel.send(f"**Moved {x} members**")
 else:
  k=discord.Embed()
  k.set_author(name='You have to be in a voice channel to use this command',icon_url='https://img.icons8.com/fluent/48/000000/error.png')
  await m.channel.send(embed=k)
@Yi.tF(Yo)
@l.command(description='general')
@Yi.has_permissions(manage_messages=tU)
async def tn(m,amount:ui,word:ux=up):
 if amount<1000:
  def tF(m):
   return word in m.content
  if word:
   await m.channel.purge(limit=amount+1,tF=tF)
  else:
   await m.channel.purge(limit=amount+1)
  await m.channel.send(f"Deleted **{amount}** messages",delete_after=5)
 else:
  k=discord.Embed()
  k.set_author(name="Limit: 1000",icon_url="https://img.icons8.com/officel/16/000000/restriction-shield.png")
  await m.channel.send(embed=embed)
@Yi.tF(Yo)
@l.command(description='general')
@Yi.has_permissions(ban_members=tU)
async def tw(m,R:discord.Member):
 k=discord.Embed(YB=b)
 Yj=[]
 async for YC in m.guild.audit_logs(limit=up,action=discord.AuditLogAction.ban):
  if '{0.target}'.format(YC)==R.display_name+'#'+ux(R.discriminator):
   Yj.append(YC)
 if uy(Yj)!=0:
  k.set_author(name=f"Past bans for {member.display_name}")
  for YC in Yj:
   k.insert_field_at(0,name=ux(YC.created_at)[:19],value=f'{entry.user} banned {entry.target}\nReason: {str(entry.reason)}'.format(YC),inline=ub)
 else:
  k.set_author(name=f"No past bans for {member.display_name}")
 await m.channel.send(embed=k)
@Yi.tF(Yo)
@l.command(aliases=['rb'],description='general')
@Yi.has_permissions(ban_members=tU)
async def tH(m):
 k=discord.Embed(YB=b)
 tw=[]
 async for YC in m.guild.audit_logs(limit=10,action=discord.AuditLogAction.ban):
  tw.append(YC)
 if uy(tw)!=0:
  k.set_author(name=f"Recent bans")
  for YC in tw:
   k.insert_field_at(0,name=ux(YC.created_at.strftime("%A, %d %B at %I:%M %p")),value=f'{entry.user} banned {entry.target}\nReason: {str(entry.reason)}'.format(YC),inline=ub)
 else:
  k.set_author(name="No past bans")
 await m.channel.send(embed=k)
@tw.error
async def tT(m,i):
 if ul(i,Yi.MissingRequiredArgument):
  k=discord.Embed(YB=b)
  Yj=[]
  async for YC in m.guild.audit_logs(limit=up,action=discord.AuditLogAction.ban):
   if '{0.target}'.format(YC)==m.author.display_name+'#'+ux(m.author.discriminator):
    Yj.append(YC)
  if uy(Yj)!=0:
   k.set_author(name=f"Past bans for {ctx.author.display_name}")
   for YC in Yj:
    k.insert_field_at(0,name=ux(YC.created_at)[:19],value=f'{entry.user} banned {entry.target}\nReason: {str(entry.reason)}'.format(YC),inline=ub)
  else:
   k.set_author(name=f"No past bans for {ctx.author.display_name}")
  await m.channel.send(embed=k)
@tR.error
async def td(m,i):
 if ul(i,Yi.BadArgument):
  await m.channel.send('I cant find that user')
 elif ul(i,Yi.MissingRequiredArgument):
  k=discord.Embed(title="Ban",description=f"{get_prefix(None, None)}ban [User here]\nEx: {get_prefix(None, None)}ban @someone",YB=b)
  await m.channel.send(embed=k)
@tS.error
async def tN(m,i):
 if ul(i,Yi.BadArgument):
  await m.channel.send('I cant find that user')
 elif ul(i,Yi.MissingRequiredArgument):
  k=discord.Embed(title="Kick",description=f"{get_prefix(None, None)}Kick [User here]\nEx: {get_prefix(None, None)}ban @someone",YB=b)
  await m.channel.send(embed=k)
@tz.error
async def ts(m,i):
 if ul(i,Yi.MissingRequiredArgument):
  k=discord.Embed(title="unban",description=f"{get_prefix(None, None)}unban [User here]\nEx: {get_prefix(None, None)}unban @someone",YB=b)
  await m.channel.send(embed=k)
 if ul(i,Yi.BadArgument):
  await m.channel.send('I cant find that user')
 elif ul(i,Yi.CommandInvokeError):
  await m.channel.send('I dont think he banned')
@tn.error
async def tE(m,i):
 if ul(i,Yi.MissingRequiredArgument):
  await m.channel.send("Specify amount")
@tL.error
async def tc(m,i):
 if ul(i,Yi.MissingRequiredArgument):
  k=discord.Embed(title="Unmute",description=f"{get_prefix(None, None)}Unmute [@someone]\nEx: {get_prefix(None, None)}Unmute @Leg ",YB=b)
  await m.channel.send(embed=k)
@tI.error
async def tg(m,i):
 if ul(i,Yi.MissingRequiredArgument):
  k=discord.Embed(title="Example:",description=f"{get_prefix(None, None)}massmove Lounge 1\n{get_prefix(None, None)}massmove 708120128977633311\n{get_prefix(None, None)}ms Lounge 1\n{get_prefix(None, None)}ms 708120128977633311",YB=b)
  k.set_author(name='You need to specify the channel your massmoving to!',icon_url='https://img.icons8.com/plasticine/100/000000/cancel.png')
  await m.channel.send(embed=k)
 elif ul(i,Yi.BadArgument):
  k=discord.Embed(title="Example:",description=f"{get_prefix(None, None)}massmove Lounge 1\n{get_prefix(None, None)}massmove 708120128977633311\n{get_prefix(None, None)}ms Lounge 1\n{get_prefix(None, None)}ms 708120128977633311",YB=b)
  k.set_author(name='That\'s not a voice channel',icon_url='https://img.icons8.com/plasticine/100/000000/cancel.png')
  await m.channel.send(embed=k)
@Yi.tF(Yo)
@l.command(aliases=['ma'],description='general')
@Yi.has_permissions(administrator=tU)
async def tB(m):
 if m.author.voice:
  m=await m.channel.send('Muting...')
  x=0
  for R in m.author.voice.channel.members:
   if R!=m.author and not R.voice.mute and not R.guild_permissions.administrator:
    x+=1
    await R.edit(mute=tU)
   await m.edit(content=f"Muted {x} people")
 else:
  k=discord.Embed()
  k.set_author(name='You have to be in a voice channel to use this command',icon_url='https://img.icons8.com/fluent/48/000000/error.png')
  await m.channel.send(embed=k)
@Yi.tF(Yo)
@l.command(aliases=['um'],description='general')
@Yi.has_permissions(administrator=tU)
async def ta(m):
 if m.author.voice:
  m=await m.channel.send('Unmuting...')
  x=0
  for R in m.author.voice.channel.members:
   if R!=m.author and R.voice.mute and not R.guild_permissions.administrator:
    x+=1
    await R.edit(mute=ub)
   await m.edit(content=f"Unmuted {x} people")
 else:
  await m.YN()
  k=discord.Embed()
  k.set_author(name='You have to be in a voice channel to use this command',icon_url='https://img.icons8.com/fluent/48/000000/error.png')
  await m.channel.send(embed=k)
@Yi.tF(Yo)
@l.command(aliases=['da'],description='general')
@Yi.has_permissions(administrator=tU)
async def tM(m):
 if m.author.voice:
  for R in m.author.voice.channel.members:
   await R.move_to(up)
 else:
  k=discord.Embed()
  k.set_author(name='You have to be in a voice channel to use this command',icon_url='https://img.icons8.com/fluent/48/000000/error.png')
  await m.channel.send(embed=k)
@Yi.tF(Yo)
@l.command(description='chaos')
async def tD(m,amount:ui,*,A):
 await m.message.delete()
 for _i in uk(amount):
  await m.send(A)
l.run(x,bot=ub)
